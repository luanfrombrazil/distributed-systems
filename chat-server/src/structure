chat-server/
├── pom.xml                         # Arquivo de dependências e build do Maven
└── src/
    └── main/
        ├── java/
        │   └── br/com/seunome/chat/
        │       ├── ChatServerApplication.java    # Classe principal que inicia o servidor Spring Boot
        │       │
        │       ├── config/
        │       │   ├── ConcurrencyConfig.java    # Define o Bean do Semaphore para controle de concorrência
        │       │   └── WebMvcConfig.java         # Registra o Interceptor no Spring MVC
        │       │
        │       ├── controller/
        │       │   ├── GroupController.java      # Endpoints: GET /groups, POST /groups
        │       │   └── MessageController.java    # Endpoints: GET /messages, POST /messages
        │       │
        │       ├── dto/                          # Data Transfer Objects - Objetos que definem a API JSON
        │       │   ├── CreateGroupRequest.java   # DTO para a requisição de criação de grupo
        │       │   ├── MessageRequest.java       # DTO para a requisição de envio de mensagem (com idemKey, text, nickname)
        │       │   └── MessageResponse.java      # DTO para a resposta ao buscar mensagens
        │       │
        │       ├── entity/ (ou model)
        │       │   ├── Group.java                # Entidade JPA que representa uma sala/grupo
        │       │   └── Message.java              # Entidade JPA para uma mensagem (com idemKey, text, timestamp_server, etc.)
        │       │
        │       ├── exception/
        │       │   └── GlobalExceptionHandler.java # Com @ControllerAdvice, para tratar erros de forma centralizada
        │       │
        │       ├── interceptor/
        │       │   └── ConcurrencyLimitInterceptor.java # Lógica do Semaphore para barrar requisições (HTTP 429)
        │       │
        │       ├── repository/
        │       │   ├── GroupRepository.java      # Interface Spring Data JPA para a entidade Group
        │       │   └── MessageRepository.java    # Interface Spring Data JPA para a entidade Message
        │       │
        │       └── service/
        │           ├── GroupService.java         # Lógica de negócio para criar e listar grupos
        │           └── MessageService.java       # Lógica de negócio principal: salvar mensagem, checar idempotência
        │
        └── resources/
            ├── application.properties        # Configurações da aplicação (banco de dados, porta do servidor, etc.)
            └── static/                         # Para arquivos estáticos (não usado neste projeto)